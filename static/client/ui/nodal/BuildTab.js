Ext.define('App.ui.nodal.BuildTab', {
	extend: 'App.ui.ToolsTab',
	alias: 'widget.nodal-buildtab',
	mixins: {
		tips: 'App.ui.TipHelper',
	},
	generateConfig: function() {
		return {
			// dockedItems: [{
				// xtype: 'toolbar',
				defaults: {
					xtype: 'buttongroup',
					headerPosition: 'bottom',
					margins: '3 0 3 3',
				},
				items:[{
					// 'Implementation' group
					xtype: 'buttongroup',
					title: 'Implementation',
					ref: 'implementationGroup',
					columns: 2,
					defaults: {
						// cellCls: 'table-cell-padded',
					},
					items: [{
						iconCls: 'build-24',
						text: 'Compile',
						rowspan: 2,
						iconAlign: 'top',
						scale: 'medium',
						xtype: 'splitbutton',
						// handler: function() {
						// var action = new Workspace.tools.nodal.SerializeAction({});
						// this.fireEvent('action',action);
						// },
						// scope: this,
						ref: 'serializeButton',
						handler: this.compile,
						scope: this,
						tooltip: {
							title: 'Compile System',
							text: 'Compiles the system into a domain-level specification. Several output '+
							'files will be added to this directory, including a graphical representation of the included hairpins, ' +
							'a NUPACK multi-objective script for thermodynamic sequence design, and a Domain Design specification for '+
							'interactive sequence design using Web DD. ',
							anchor: 'top',
							//'Serializes the workspace to the "TerseML" format accepted by the current version of the compiler; outputs to input.txt in this directory.'
						},
						menu: [{
							text: 'Clean',
							iconCls: 'clean',
							tooltip: {
								title: 'Clean files',
								text: 'Clears files generated by compiling the'+
								'system, including: serialized outputs, SVG '+
								'images, and sequence design specifications.'
							},
							handler: this.clean,
							scope: this,
						},{
							text: 'Compile with Compiler v2b ',
							handler: this.compileTerse,
							scope: this,
						},{
							text: 'Compile locally ',
							handler: this.compileLocal,
							scope: this,
						}]
					},{
						iconCls: 'compile',
						text: 'Serialize',
						rowspan: 1,
						disabled: true,
						ref:'serializeMenu',
						tooltip: {
							title: 'Serialize System',
							text: 'View and edit serialized forms of nodal system, including TerseML, PIL, and SVG, for further processing (must compile first). ',
						},
						menu: [{
							text: 'TerseML',
							iconCls: 'txt',
							ref: 'txt',
							disabled: true,
							handler: _.bind(this.openFile,this,'txt'),
						},{
							text: 'DyNAML',
							iconCls: 'dynaml',
							ref: 'dynaml',
							disabled: true,
							handler: _.bind(this.openFile,this,'dynaml'),
						},{
							text: 'PIL',
							iconCls: 'pil',
							ref: 'pil',
							disabled: true,
							handler: _.bind(this.openFile,this,'pil'),
						},{
							text: 'SVG',
							iconCls: 'svg',
							ref: 'svg',
							disabled: true,
							handler: _.bind(this.openFile,this,'svg'),
						}]
					},{
						iconCls: 'sequence',
						text: 'Sequence',
						rowspan: 1,
						disabled: true,
						ref:'sequenceMenu',
						tooltip: {
							title: 'Sequence System',
							text: 'Opens the system in a sequence editor to perform sequence design. Available sequence editors: NUPACK multi-objective, Web DD, and SpuriousC.',
						},

						//handler: this.spuriousDesign,
						//scope: this,
						menu: [{
							text: 'SpuriousC',
							iconCls: 'spurious-c',
							ref: 'spur',
							disabled: true,
							handler: _.bind(this.openFile,this,'spur'),
						},{
							text: 'NUPACK',
							iconCls: 'nupack',
							ref: 'nupack',
							disabled: true,
							handler: _.bind(this.openFile,this,'nupack'),
						},{
							text: 'Web DD',
							iconCls: 'seq',
							ref: 'domains',
							disabled: true,
							handler: _.bind(this.openFile,this,'domains'),
						}]
					}]
				},{
					xtype: 'buttongroup',
					title: 'Simulation',
					columns: 1,
					disabled: true,
					defaults: {
						// cellCls: 'table-cell-padded',
					},
					items: [{
						text: 'Enumerate',
						iconCls: 'enumerate',
						iconAlign: 'left'
					},{
						text: 'Simulate',
						iconCls: 'simulate',
						iconAlign: 'left'
					}]
				}]
//			}]
		}
	},
	getDoc: function() {
		return this.ribbon.canvas.doc ? this.ribbon.canvas.doc : this.ribbon.canvas.document; 
	},
	initComponent: function() {
		this.callParent(arguments);
		_.each(this.query('*[ref]'), function(cmp) {
			this[cmp.ref] = cmp;
		}, this);
		this.mixins.tips.init.apply(this,arguments);
		this.sequenceMenu.on('click',this.doUpdateMenus,this);
		this.serializeMenu.on('click',this.doUpdateMenus,this);
	},
	init: function() {
		this.updateMenus(true);
	},
	doUpdateMenus: function() {
		this.updateMenus(false);
	},
	updateMenus: function(firstTime) {
		firstTime = firstTime || false;
		if(!firstTime) {
			this.ribbon.canvas.renew();
		}
		var doc = this.getDoc(), basename = doc.getBasename();
		if(doc) {
			_.each(['txt','dynaml','pil','svg','nupack','spur','domains'],function(ext) {
				if(doc.getSiblingByName(App.Path.repostfix(basename,ext))) {
					this.sequenceMenu.enable();
					this.serializeMenu.enable();
					this[ext].enable();			
				} else {
					this[ext].disable();
				}
			},this);
		}
	},
	enableMenus: function() {
		this.sequenceMenu.enable();
		this.serializeMenu.enable();			
	},
	openFile: function(ext) {
		var doc = this.getDoc(), basename = doc.getBasename();
		var sibling = doc.getSiblingByName(App.Path.repostfix(basename,ext));
		if(sibling) {
			App.ui.Launcher.launchDocument(sibling);
		}
	},
	clean: function() {
		var node = this.ribbon.canvas.doc.getDocumentPath(); 
		App.runTask('Nodal',{
			node:node,
			action:'clean',
		},_.bind(function() {
			//this.enableMenus();
			Ext.msg('Nodal Build','Build of system <strong>{0}</strong> completed.',this.getDoc().getBasename());
		},this));
	},
	serialize: function() {
		this.serializeDynaml();
		var data = Workspace.tools.nodal.serializeTerse(this.ribbon.canvas.workspace);
		console.log(data);
	},
	compile: function() {
		// try {			
			// var lib = this.compileDynamic();
			// console.log(lib); console.log(App.dynamic.Compiler.printStrands(lib)); console.log(lib.toNupackOutput());
		// } catch(e) {
			// console.log(e);
		// }
		this.compileDynamicServer();
		//this.compileTerse();
	},
	compileLocal: function() {
		var lib = this.compileDynamic();
		console.log(lib.toSVGOutput())
	},
	compileDynamic: function() {
		var dynaml = this.serializeDynaml();
		var lib = App.dynamic.Compiler.compileLibrary(dynaml);
		return lib;
	},
	compileDynamicServer: function() {
		var data = Ext.encode(this.serializeDynaml()),
			node = this.ribbon.canvas.doc.getDocumentPath(); //App.path.repostfix([this.ribbon.canvas.doc.getDocumentPath(),'txt']);
		App.runTask('Nodal',{
			node:node,
			data:data,
			action: 'dynamic',
		},_.bind(function() {
			//this.enableMenus();
			Ext.msg('Nodal Build','Build of system <strong>{0}</strong> completed.',this.getDoc().getBasename());
			this.highlightOutput();
		},this));
	},
	compileTerse: function() {
		var data = this.serializeTerse(),
			node = this.ribbon.canvas.doc.getDocumentPath(); //App.path.repostfix([this.ribbon.canvas.doc.getDocumentPath(),'txt']);
		App.runTask('Nodal',{
			node:node,
			data:data,
			action: 'all',
		},_.bind(function() {
			//this.enableMenus();
			Ext.msg('Nodal Build','Build of system <strong>{0}</strong> completed.',this.getDoc().getBasename());
			this.highlightOutput();
		},this));
	},
	serializeDynaml: function() {
		return Workspace.tools.nodal.serializeDynaml(this.ribbon.canvas.workspace);	
	},
	serializeTerse: function() {
		return Workspace.tools.nodal.serializeTerse(this.ribbon.canvas.workspace)
	},
	highlightOutput: function() {
		if(!this.outputTip) {
			this.outputTip = Ext.create('Ext.tip.ToolTip',{
				target: this.implementationGroup.getEl(),
				anchor: 'left',
				title: 'View compilation results',
				html: 'Use these buttons to quickly view the compiled system. '+
				'Use the "Serialize" button to view visual and textual '+
				'representations of the system. Use the Sequence button to '+
				'see options for sequence design. ',
				closable: true,
				autoHide: true,
				dismissDelay: 10000,
				showDelay: 1500,
			});
		}
		if(this.serializeButton.tip) {
			this.serializeButton.tip.hide();
		}
		this.outputTip.show();
	},
	spuriousDesign: function() {
		var doc = this.ribbon.canvas.doc.getSiblingByName('spurious-out');
		if(doc) {
			App.runTask('Spurious', {
				node: doc.getPath()
			});
		}
	}
});

Ext.ns('Workspace.tools.nodal');

////////////////////////////////////////////////////////////////////////////////////////////////
Workspace.tools.nodal.serializeTerse = function(workspace) {
	return workspace.buildManager.serializeTerse();
}

Workspace.tools.nodal.serializeDynaml = function(workspace) {
	return workspace.buildManager.serializeDynaml();
}
