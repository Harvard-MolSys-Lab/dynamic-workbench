declare component rxn2_0(t, bm): x1 + x2 -> 

# Domains
# Toeholds: d1, d3, d4, d6
sequence d1 = "<t>N"
sequence d3 = "<t>N"
sequence d4 = "<t>N"
sequence d6 = "<t>N"

# Branch migration domains: d2, d5
sequence d2 = "<bm>N"
sequence d5 = "<bm>N"

# I/O sequences
sequence x1 = d1 d2 d3
sequence x2 = d4 d5 d6

# Strands
strand x1 = d1 d2 d3
strand x2 = d4 d5 d6

strand bi = d2 d3 d4
strand oi = d5 d6
strand li_base = d6* d5* d4* d3* d2* d1*

# Complexes
structure X1 = x1 : domain ...

structure Li = bi + oi + li_base : domain  (((+((+))))).
structure Hi = x1 + oi + li_base : domain ((( +((+)).)))
structure Bi = bi : domain ...

structure X2 = x2 : domain ...

#structure Hi    = x1 + oi + li_base : domain (((+ ((+)).)))
structure Waste1 = x1 + x2 + li_base : domain (((+(((+))))))
structure Oi = oi : domain ..

# Kinetics
kinetic X1 + Li -> Hi + Bi
kinetic X2 + Hi -> Waste1 + Oi
