declare component rxn2_2(t, bm): x1 + x2 -> x3 + x4

# Domains
# Toeholds: d1, d3, d4, d6, d7, d9
sequence d1 = "<t>N"
sequence d3 = "<t>N"
sequence d4 = "<t>N"
sequence d6 = "<t>N"
sequence d7 = "<t>N"
sequence d9 = "<t>N"
sequence d10 = "<t>N"
sequence d12 = "<t>N"

# Branch migration domains: d2, d5, d8, d10
sequence d2 = "<bm>N"
sequence d5 = "<bm>N"
sequence d8 = "<bm>N"
sequence d11 = "<bm>N"
sequence d13 = "<bm>N"
sequence d14 = "<bm>N"

# I/O sequences
sequence x1 = d1 d2 d3
sequence x2 = d4 d5 d6
sequence x3 = d7 d8 d9
sequence x4 = d10 d11 d12

# Strands
strand x1 = d1 d2 d3
strand x2 = d4 d5 d6

strand bi = d2 d3 d4
strand oi = d5 d6 d13 d7 d14 d10
strand li_base = d6* d5* d4* d3* d2* d1*

strand ti_base = d10* d13* d7* d14* d6*

strand x3 = d13 d7 d8 d9
strand x4 = d14 d10 d11 d12

# Complexes
structure X1 = x1 : domain ...

structure Li = bi + oi + li_base : domain  (((+((....+))))).
structure Hi = x1 + oi + li_base : domain ((( +((....+)).)))
structure Bi = bi : domain ...

structure X2 = x2 : domain ...

#structure Hi    = x1 + oi + li_base : domain (((+ ((....+)).)))
structure Waste1 = x1 + x2 + li_base : domain (((+(((    +))))))
structure Oi = oi : domain ......

structure Ti = x3 + x4 + ti_base : domain ((..+((..+)))).
structure Waste2 = oi + ti_base : domain .(((((+)))))

structure X3 = x3 : domain ....
structure X4 = x4 : domain ....

# Kinetics
kinetic X1 + Li -> Hi + Bi
kinetic X2 + Hi -> Waste1 + Oi
kinetic Oi + Ti -> Waste2 + X3 + X4
