declare component tweezer(toe1,handle1,handle2,toe2): closing -> 
## Defines a new Yurke 2000 tweezer, with handle sequences such that it is closed by the "closing" strand,
## which has the given lengths.

## NOT YET FINISHED

# lengths
#! turn = 4
#! arm1 = 18
#! arm2 = 18

## Sequences

sequence turn = <turn>N
sequence arm1 = <arm1>N
sequence arm2 = <arm2>N

sequence handle1 = <handle1>N
sequence handle2 = <handle2>N

sequence toehold1 = <toe1>N
sequence toehold2 = <toe2>N

sup-sequence closing = pro3 spacer1 toehold recognition pro1 spacer2 hairpin1 hairpin2 hairpin1* hairpin2

## Strands  (note: we have to spell this out again, only for the reason that the "domain-level" structures need it)
strand Trans = pro3 spacer1 toehold recognition pro1 spacer2 hairpin1 hairpin2 hairpin1* hairpin2
strand Act = pro1* recognition* toehold*
# note that Trans should be RNA, not DNA.  But we don't yet have a good notation for indicating that.

strand [dummy] Switch = recognition pro1 pro2 ttt pro2* 

## Structures
structure Transcript = Trans : domain ......(.).
structure Activator = Act : domain ...
structure TransAct = Trans + Act : domain ..(((.(.).+)))

# The structures below are only if we want kinetics for dummy reactions defined here.
structure Switch_Off = Switch : domain ..(.)
structure Switch_On  = Switch + Act : domain  (((.)+)).

## Kinetics
# Kinetics not involving the dummy switch
kinetic Transcript + Activator -> TransAct

# Kinetics involving the dummy switch
kinetic Activator + Switch_Off -> Switch_On
kinetic Transcript + Switch_On -> Switch_Off + TransAct

## Transcription kinetics is not part of the Pepper semantics!
# transcription: Switch_On -> Transcript + Switch_On
