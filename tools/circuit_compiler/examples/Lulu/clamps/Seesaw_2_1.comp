declare component Seesaw_2_1(toe, rec, clamp): left1 + left2 -> right1

### Domains
sequence toe  = "?N" : <toe>   # Universal toehold domain
sequence base = "?N" : <rec>   # Base recognition domain on seesaw gate
sequence c    = "?N" : <clamp> # Clamp domain
sequence l1   = "?N" : <rec>   # Left recognition domain
sequence l2   = "?N" : <rec>   # Left recognition domain
sequence r1   = "?N" : <rec>   # Right recognition domain

### I/O connectors
sequence left1  = c l1 c toe c base c : <4*clamp + 2*rec + toe>
sequence left2  = c l2 c toe c base c : <4*clamp + 2*rec + toe>
sequence right1 = c base c toe c r1 c : <4*clamp + 2*rec + toe>

### Strands
strand Base   = c* toe* c* base* c* toe* c* : <4*clamp + 2*toe + rec>  # Base of the seesaw itself
strand Left1  = c l1 c toe c base c : <4*clamp + 2*rec + toe>  # Strand which fits on left side of seesaw
strand Left2  = c l2 c toe c base c : <4*clamp + 2*rec + toe>  # Strand which fits on left side of seesaw
strand Right1 = c base c toe c r1 c : <4*clamp + 2*rec + toe>  # Strand which fits on right side of seesaw

### Structures
# Single-stranded:
structure LEFT1  = Left1  : domain .......  # A single-stranded left strand
structure LEFT2  = Left2  : domain .......  # A single-stranded left strand
structure RIGHT1 = Right1 : domain .......  # A single-stranded right strand

# Double-stranded:
structure SEESAW_LEFT1  = Base + Left1  : domain ..(((((+..)))))  # Seesaw in the tipped left position
structure SEESAW_LEFT2  = Base + Left2  : domain ..(((((+..)))))  # Seesaw in the tipped left position
structure SEESAW_RIGHT1 = Base + Right1 : domain (((((..+)))))..  # Seesaw in the tipped right position

### Reactions
kinetic LEFT1 + SEESAW_RIGHT1 -> SEESAW_LEFT1 + RIGHT1  # Forward reaction
kinetic SEESAW_LEFT1 + RIGHT1 -> LEFT1 + SEESAW_RIGHT1  # Reverse reaction

kinetic LEFT2 + SEESAW_RIGHT1 -> SEESAW_LEFT2 + RIGHT1  # Forward reaction
kinetic SEESAW_LEFT2 + RIGHT1 -> LEFT2 + SEESAW_RIGHT1  # Reverse reaction

